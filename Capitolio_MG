//Delimite zonas de impacto direto e indireto desmoranamento de fal√©sias

//var roi = geometry



  
Map.setOptions('SATELLITE');
var dataset = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2');
var elevation = dataset.select('DSM');
var elevationVis = {
  min: 0,
  max: 5000,
  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff']
};
Map.setCenter(-46.2992, -20.65586, 14);



var dataset2 = ee.Image('JAXA/ALOS/AW3D30_V1_1');
var elevation2 = dataset2.select('AVE');
// Reproject an image mosaic using a projection from one of the image tiles,
// rather than using the default projection returned by .mosaic().
var proj = elevation.first().select(0).projection();
var slopeReprojected = ee.Terrain.slope(elevation.mosaic()
                             .setDefaultProjection(proj));
//Map.addLayer(slopeReprojected, {min: 0, max: 45}, 'Slope');
var sloperclass = ee.Image(1).where(slopeReprojected.gt(18).and(slopeReprojected.lte(100)), 2);

var red = {
  min: 1.0,
  max: 1.0,
  palette: ['FF0000'],
};

var sloperisk = sloperclass.eq(2);
var sloperiskcrop = sloperisk.mask(sloperisk); // mask it
Map.addLayer(sloperiskcrop,red,'Grande Declive');

var dataset = ee.ImageCollection('GLCF/GLS_WATER');
var water = dataset.select('water');
var waterVis = {
  min: 1.0,
  max: 4.0,
  palette: ['FAFAFA', '00C5FF', 'DF73FF', '828282', 'CCCCCC'],
};


var vectors = sloperiskcrop.reduceToVectors({
  geometry: roi,
  scale: 30,
  geometryType: 'polygon',
  reducer: ee.Reducer.countEvery()
});
print(vectors)

var fp2 = vectors.geometry(); 
var bufferplus = fp2.buffer(30);


//Map.addLayer(vectors);
//Map.addLayer(water, waterVis, 'Water');



// Apply a reduce region method
var max_alt = elevation2.reduceRegion(
{reducer: ee.Reducer.max(),
geometry: bufferplus ,
scale: 30,
maxPixels: 9e9});
// Display the image.
// Apply a reduce region method
var min_alt = elevation2.reduceRegion(
{reducer: ee.Reducer.min(),
geometry: bufferplus ,
scale: 30,
maxPixels: 9e9});
// Display the image.


var divid2 = max_alt.get("AVE");
var divid3 = min_alt.get("AVE");
var divd = ee.Number(divid2).subtract(divid3)
var divdsafe = ee.Number(divd).multiply(2);
print('Maximum altitude (meters):', max_alt);
print('Maximum altitude (meters):', divd);
var fp = vectors.geometry(); 
var buffersimple = fp.buffer(divd);
var buffersafe = fp.buffer(divdsafe);
Map.addLayer(buffersafe, {color: 'CCFF33'}, 'Impacto Indireto (ID x2');
Map.addLayer(buffersimple, {color: 'FF0000'}, 'Impacto Direto (ID)');
